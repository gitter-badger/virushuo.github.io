<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on </title>
    <link>/tags/book/</link>
    <description>Recent content in Book on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 08 Aug 2009 00:08:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>谈谈《程序员修炼之道》</title>
      <link>/posts/the_pragmatic_programmer/</link>
      <pubDate>Sat, 08 Aug 2009 00:08:00 +0800</pubDate>
      
      <guid>/posts/the_pragmatic_programmer/</guid>
      <description>学过高中物理的人，应该会记得，原子中的电子获得能量之后，将发生能级跃迁，到达更高的能量状态。其实任何工种都是一样的，要跳出自己的水平，到达更高的级别，不是件容易的事，这个跳跃过程总需要一些东西的辅助。诚然，如果要成为一个好人，那么只要做好在幼儿园中学到的一切就足够。如果要成为一个好程序员，所需要的道理也不太多，只不过，当水平不够的时候，永远不能认识到那些朴素道理的重要。而当水平达到的时候，这些道理自然会明白。所以一本帮助程序员进阶的书，很容易落到低手觉得是废话，高手也觉得是废话的悲惨境地。
很多年以前，有人和我推荐过这本《程序员修炼之道》，甚至专门买了一本送到我家。而当年的我，不知道是由于无知，自负，浮躁，或是其他，只草草翻了一下，就下了个&amp;rdquo;烂书&amp;rdquo;的定义，扔在书架一角。后来有朋友在我书架上发现，如获至宝，说已经买不到了。我当然乐得送了人情。在我心目中，最好的入门书永远是《代码大全》，那也是对我影响最深的一部书。
过了很多年之后，再来谈这本书，发现很多人的评价比我高的多，自知不妙，赶快找来重读，这才知道错过了什么。在一个滥俗的译名之下，在一个看起来不知所云的目录之后，在一些读起来拗口的句子之中，隐藏的竟然是相当伟大的思想，朴素而真挚，简单而有效。这时候我突然明白，这是一本不逊于《代码大全》的伟大著作，后者一直被我誉为&amp;rdquo;新手圣经&amp;rdquo;。
经验这个东西，往往并不能告诉我们什么一定对，但是可以告诉我们什么一定不对。这本书完全是经验凝成，没有大道理，没有新观念。这些朴素的道理就是创造一个合格软件和作一个好程序员所必须了解的。比如 &amp;ldquo;提示44 不要靠巧合编程&amp;rdquo;，这句话表达的意思是&amp;rdquo;不要预设立场&amp;rdquo;。听起来简单，但是只要随手翻翻你最新写过的一段程序，通常都会发现代码中做了大量的&amp;rdquo;假设&amp;rdquo;。书中用一道习题，假设了用户使用命令行环境，假设用户懂英语&amp;hellip;.都可能导致问题。怕了吧？幸好还有&amp;rdquo;提示30 你不可能写出完美的软件&amp;rdquo;，这可不是帮你开脱责任，而是在讲如何控制需求，这正是能顺利完成一个项目的根本前提，可惜事实上往往到了项目失败的时候，人们才想起来需求出了问题。
这本书涉猎的范围相当广，如何设计架构，如何思考问题，如何测试，如何编码，如何处理文档&amp;hellip;如果细心琢磨，构建软件的所有主干和细微枝节都有所涉及。和很多人的看法不同，我不认为这是一本可以轻松读完的书。一方面，这本书涉及的内容太多，虽然已经尽量讲述，但所有话题都可以继续引申出无限的内容，如果用心，还可以配合附录中所提到的各种论文和资源继续学习。习题也需要仔细思考。这绝不是一本小说。另一方面，作者用了大量的隐喻，导致读起来有一定难度。开始我认为是翻译质量有问题，不过慢慢发现美国的读者读起来也未必容易。原因还是涉及到的范围过大。我特意模仿这种风格写了本文的第一段。虽然是中文，读起来也不容易吧。
相信以上的两点会阻挡一部分人阅读这本书。我也算是曾经受阻的人之一。 不过，好书并不会随着时间的推移和平台变化而消亡，好书只会成为经典。无论是《人月神话》，还是《代码大全》，都在时间的长河中沉淀下来，传颂至今。这本书，虽然历史只有10年，不过现在再来翻看，不仅毫不落伍，甚至感觉穿透了时间，看到了这些年中不少自己犯过的错误，我相信这也是一本能经的起时间沉淀的书，只不过需要多点耐心。因此，我郑重的写下这篇书评，希望再能读到这本书的人多一点耐心，越过语言的障碍，直入本质，直至跃向更高级别。这个希望，不仅仅是对新手说的，其实也包括我自己。如本书开头所说：注重实效的程序员应该不断学习。我们都应该不断的学习下去。</description>
    </item>
    
    <item>
      <title>技术改变世界以及减速慢行</title>
      <link>/posts/dic_comment/</link>
      <pubDate>Tue, 03 Jun 2008 11:06:00 +0800</pubDate>
      
      <guid>/posts/dic_comment/</guid>
      <description>《梦断代码 （Dream In Code）》 韩磊 译 ，有幸先睹，颇有所感，做书评一篇。
拿着这本刚刚出炉的《梦断代码(Dream In Code)》，似乎让我回到了2004年夏天，那时候非典的恐惧刚刚散去。北京西二环边上的一座高档办公楼的施工重新开始了，这座大厦的9层，数百个工人正在各自忙碌，以期能弥补非典期间项目耽误掉的时间。看着杂乱又有序的工作场面，正在负责大厦中央集成软件系统的我不禁暗自赞叹——别说几百个人，就算是给我1/10于这个数字的程序员，恐怕都足够让我把这个软件项目搞砸了。
软件项目的管理者总是无比艳羡传统行业，无论是工业的流水线还是建筑的工地，只需要增加人手就可以赶上进度，这样的情形在软件行业中完全就是神话，“人月神话”。恰好也是在2004年，不知道是不是还有很多人和我一样被非典之后建筑项目赶工场面所震撼，软件行业的人们开始无比的期盼跟传统行业学习。这一年的年末，美国建筑师亚历山大所著的《建筑的永恒之道》一书突然热卖。这本建筑专业书荣登了各大网站书店的IT热书排行榜。可惜软件绝非建筑，软件是人类历史上唯一的完全在大脑中靠智慧完成的工作。而我们还没有找到管理一个只在大脑中完成的项目的方法。
硅谷有名言曰：“技术改变世界”。计算机发展了几十年，就快速的渗透了世界的各个角落。比起以往的工业革命，这次信息革命确实以无法想像的速度飞速的改变着世界。软件行业好像一个拥有了姚明的身高，爱因斯坦的智慧，但是却没有任何社会经验的巨人一般，威力巨大，但又完全无法琢磨。
相对于手上这本《梦断代码》描述的Chandler项目，我职业生涯中所看到的种种软件项目的失败都算不了什么。似乎所有项目都能找到一个失败的理由，或者说市场压力太大，工期不足，或者说资金不够，或者说程序员团队经验不足。在《梦断代码》中，这些问题都不存在，那么，是否可以让一个成功的产品横空出世呢？这个两打优秀程序员组成的团队，用他们失败的经历明确的告诉了我们：不能。
在软件行业不长的历史中，我们随处可见失败者。无论是小公司草草上马的小项目，还是大公司经过百般论证的大项目，似乎都难逃焦油坑，一个个落得了个进退不能的下场。当然，另一方面，成功者也并不罕见，Linux经过了10多年，越发成熟和优秀。微软总在进行着“这个星球上最大的软件项目”，虽然反对者百般嘲笑其软件质量低下，也并不能阻止这家公司依靠软件成为行业的垄断者。《梦断代码》中提到，Linus说，从小处着手的项目更容易获得成功。果然，从大处入手的Chandler项目深陷泥潭。但是，为什么同样从大处入手的Outlook甚至整套Office成功了呢？悲观的看来，我们大概永远也无法知道什么是对的。
幸运也不幸，人类文明也是一部试错史。人们很难预知如何做才对，所以只好一次又一次的撞墙，自省，撞墙，自省，撞的头破血流的时候，总算得到了一些经验。经验这个东西，确实也无法告诉我们应该如何做，但是至少可以告诉我们如何做肯定是错的。讲软件项目失败案例的书足够排满一个书架。但是，《梦断代码》仍然是颇具现实意义的一本，一方面是失败的故事有多少都算不得多，另一方面是，和Chandler项目这样，看起来“万事具备”，结果却“只欠成功”的项目样本确实不多。这足以让软件从业者们明白，这个行业的问题比想像的还严重。
失败的教训总是由血泪凝成。Chandler以3年时间，两打程序员，无数的资金，铸就了一面警示牌。而Scott所著的《梦断代码》，则把这块警示牌挂在了软件世界的高速公路上最显眼的位置上。上面赫然写着“前方危险，减速慢行”。
我敢打赌，这条危险的道路上绝对不会缺少新的墓碑，年轻的程序员和项目经理们仍然狂妄而自负的横冲过来。不过我至少希望更多的人可以读读这本书，然后在碰到类似的情况的时候，提醒自己减速慢行。</description>
    </item>
    
  </channel>
</rss>